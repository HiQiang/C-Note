#include"workerManager.h"


WorkerManager::WorkerManager()
{
	//1.文件不存在
	ifstream ifs;
	ifs.open(FILENAME, ios::in);
	if (!ifs.is_open())
	{
		cout << "文件不存在" << endl;
		//初始化属性
		//初始化记录人数
		this->m_EmpNum = 0;
		//初始化数组指针
		this->m_EmpArray = NULL;
		//初始化文件是否为空
		this->m_FileIsEmpty = true;
		ifs.close();
		return;
	}
	//2.文件存在，数据为空
	char ch;
	ifs >> ch;
	if (ifs.eof())
	{
		//文件为空
		cout << "文件为空" << endl;
		//初始化属性
		//初始化记录人数
		this->m_EmpNum = 0;
		//初始化数组指针
		this->m_EmpArray = NULL;
		//初始化文件是否为空
		this->m_FileIsEmpty = true;
		ifs.close();
		return;
	}
	//3.文件存在，并且记录数据
	int num = this->get_EmpNum();
	cout << "职工人数为：" << num << "人" << endl;
	this->m_EmpNum = num;
	//开辟空间
	this->m_EmpArray = new Worker * [this->m_EmpNum];
	//将文件中的数据存到数组中
	this->init_Emp();
	//测试代码
	/*
	for (int i = 0; i < this->m_EmpNum; i++) {
		cout << "职工编号：" << this->m_EmpArray[i]->m_Id<<"\t"
			<< "姓名：" << this->m_EmpArray[i]->m_Name<<"\t"
			<< "部门编号：" << this->m_EmpArray[i]->m_DeptId << endl;
	}
	*/
}

void WorkerManager::Show_Menu() {
	cout << "**********************************" << endl;
	cout << "******欢迎使用职工管理系统！******" << endl;
	cout << "**********0.退出管理程序**********" << endl;
	cout << "**********1.增加职工信息**********" << endl;
	cout << "**********2.显示职工信息**********" << endl;
	cout << "**********3.删除离职职工**********" << endl;
	cout << "**********4.修改职工信息**********" << endl;
	cout << "**********5.查找职工信息**********" << endl;
	cout << "**********6.按照编号排序**********" << endl;
	cout << "**********7.清空所有文档**********" << endl;
	cout << "**********************************" << endl;
}

void WorkerManager::ExitSystem() {
	cout << "欢迎下次使用" << endl;
	system("pause");
	exit(0);
}

//添加职工
//m_EmpArray 里面放的是指针，指向worker类的指针。worker类派生出employee，mananger，和boss类。

void WorkerManager::Add_Emp() {
	cout << "请输入添加的职工的数量：" << endl;
	int addNum = 0; //保存用户的输入数量
	cin >> addNum;
	if (addNum > 0) {
		//添加
		//计算添加的新的空间的大小
		int newSize = this->m_EmpNum + addNum; //新空间人数 = 原来记录的人数 + 新增的人数
		//开辟新空间：开辟的新空间是指向Worker类的指针数组，返回的是指向指针的指针。**
		Worker** newSpace = new Worker * [newSize];//直接记住：new返回的是指针，类比指向int*的指针：int ** .....
		//将原来空间下的数据拷贝到新空间下
		if (this->m_EmpArray != NULL) {
			for (int i = 0; i < this->m_EmpNum; i++) {
				newSpace[i] = this->m_EmpArray[i];
				//因为是数组，所以可以用索引
			}
		}
		//批量添加新数据
		for (int i = 0; i < addNum; i++) {
			int id;//职工编号
			string name;//职工姓名
			int dSelect;//部门选择

			cout << "请输入第" << i + 1 << "个新职工的编号：" << endl;
			cin >> id;
			cout << "请输入第" << i + 1 << "个新职工的姓名：" << endl;
			cin >> name;
			cout << "请选择该职工的岗位：" << endl;
			cout << "1:普通职工" << endl;
			cout << "2:经理" << endl;
			cout << "3:老板" << endl;
			cin >> dSelect;

			Worker* worker = NULL;
			switch (dSelect)
			{
			case 1:
				worker = new Employee(id, name, dSelect);
				break;
			case 2:
				worker = new Manager(id, name, dSelect);
				break;
			case 3:
				worker = new Boss(id, name, dSelect);
				break;
			default:
				break;
			}
			//将创建职工，保存到数组中
			int index = m_EmpNum + i;
			if (index < newSize) {//消除C6386缓冲区溢出警告
				newSpace[index] = worker;
			}
		}
		//释放原有空间
		delete[] this->m_EmpArray;
		//更改新空间指向
		this->m_EmpArray = newSpace;
		//更新数据个数
		this->m_EmpNum = newSize;
		//保存数据到文件中
		this->save();
		//更新职工不为空标志
		this->m_FileIsEmpty = false;
		//提示添加成功
		cout << "添加成功" << addNum << "名新职工" << endl;

	}
	else {
		cout << "输入数据有误" << endl;
	}
	//按任意键后继续
	system("pause");
}

void WorkerManager::save() {
	ofstream ofs;
	ofs.open(FILENAME, ios::out);//用输出模式打开文件 -- 写文件
	//将每个人数据写入到文件中
	for (int i = 0; i < this->m_EmpNum; i++) {
		ofs << this->m_EmpArray[i]->m_Id << " "
			<< this->m_EmpArray[i]->m_Name << " "
			<< this->m_EmpArray[i]->m_DeptId << endl;
	}
	ofs.close();
}

int WorkerManager::get_EmpNum() {
	ifstream ifs;
	ifs.open(FILENAME, ios::in);//打开文件 读文件
	int id;
	string name;
	int dId;
	int num = 0;
	while (ifs >> id && ifs >> name && ifs >> dId) {
		//统计人数变量
		num++;
	}
	return num;
}

void WorkerManager::init_Emp() {
	ifstream ifs;
	ifs.open(FILENAME, ios::in);
	int id;
	string name;
	int dId;
	int index = 0;
	while (ifs >> id && ifs >> name && ifs >> dId) {
		Worker* worker = NULL;

		if (dId == 1)//普通职工
		{
			worker = new Employee(id, name, dId);
		}
		else if (dId == 2) {//经理
			worker = new Manager(id, name, dId);
		}
		else if (dId == 3) {//老板
			worker = new Boss(id, name, dId);
		}
		this->m_EmpArray[index] = worker;
		index++;
	}
	//关闭文件
	ifs.close();
}

void WorkerManager::show_Emp() {
	//判断文件是否为空
	if (this->m_FileIsEmpty) {
		cout << "文件不存在或者记录为空!" << endl;
	}
	else {
		for (int i = 0; i < this->m_EmpNum; i++) {
			//利用多态调用程序接口
			this->m_EmpArray[i]->showInfo();
		}
	}
	system("pause");
}

int WorkerManager::IsExist(int id) {
	int index = -1;
	for (int i = 0; i < this->m_EmpNum; i++) {
		if (id == this->m_EmpArray[i]->m_Id) {
			index = i;
			break;
		}
	}
	return index;
}

void WorkerManager::Del_Emp() {
	if (this->m_FileIsEmpty) {
		cout << "文件不存在或记录为空!" << endl;
	}
	else {
		//按照职工编号删除
		cout << "请输入想要删除的职工编号：" << endl;
		int id = -1;
		cin >> id;
		int index = this->IsExist(id);
		if (index != -1) {//说明职工存在，并且要删除index位置上的职工
			for (int i = index; i < this->m_EmpNum - 1; i++) {
				//数据前移
				this->m_EmpArray[i] = this->m_EmpArray[i + 1];
			}
			//delete m_EmpArray[this->m_EmpNum-1];
			this->m_EmpNum--;//更新数组中记录人员个数
			//同步更新到文件中
			this->save();
			cout << "删除成功!" << endl;
		}
		else {
			cout << "删除失败，未找到该职工" << endl;
		}
		system("pause");
	}
}

void WorkerManager::Mod_Emp() {
	if (this->m_FileIsEmpty) {
		cout << "文件不存在或记录为空!" << endl;
	}
	else {
		cout << "请输入修改职工的编号：" << endl;
		int id;
		cin >> id;

		int ret = this->IsExist(id);
		if (ret != -1) {
			//查找到编号的职工
			int newId = -1;
			string newName = "";
			int dSelect = -1;
			cout << "查找到" << id << "号职工" << endl;
			this->m_EmpArray[ret]->showInfo();
			delete this->m_EmpArray[ret];
			cout << "请输入新职工号：" << endl;
			cin >> newId;
			cout << "请输入新职工名字：" << endl;
			cin >> newName;
			cout << "请选择新职工的岗位：" << endl;
			cout << "1:普通职工" << endl;
			cout << "2:经理" << endl;
			cout << "3:老板" << endl;
			cin >> dSelect;

			Worker* worker = NULL;
			switch (dSelect)
			{
			case 1:
				worker = new Employee(newId, newName, dSelect);
				break;
			case 2:
				worker = new Manager(newId, newName, dSelect);
				break;
			case 3:
				worker = new Boss(newId, newName, dSelect);
				break;
			default:
				break;
			}
			this->m_EmpArray[ret] = worker;
			cout << "修改成功" << endl;
			//保存到文件中
			this->save();
		}
		
		else {
			cout << "修改失败，查无此人" << endl;
		}
		system("pause");
	}

}

void WorkerManager::Find_Emp() {
	if (this->m_FileIsEmpty) {
		cout << "文件不存在或记录为空!" << endl;
	}
	else {
		cout << "请输入查找的方式" << endl;
		cout << "1.按职工编号查找" << endl;
		cout << "2.按职工姓名查找" << endl;
		int select;
		cin >> select;
		if (select == 1) {
			cout << "按照职工编号查找" << endl;
			int id;
			cout << "请输入查找的职工编号：" << endl;
			cin >> id;
			int ret = IsExist(id);
			if (ret != -1) {
				cout << "查找成功!该职工信息如下：" << endl;
				this->m_EmpArray[ret]->showInfo();
			}
			else
			{
				cout << "查无此人" << endl;
			}
		}
		else if (select == 2) {
			cout << "按照职工姓名查找" << endl;
			string name;
			//加入是否查到的标志
			bool flag = false;//默认未找到职工；

			cout << "请输入查找的姓名:" << endl;
			cin >> name;
			for (int i = 0; i < this->m_EmpNum; i++) {
				if (name == this->m_EmpArray[i]->m_Name) {
					flag = true;
					cout << "查找成功，职工编号为：" << this->m_EmpArray[i]->m_Id << endl;
					cout << "信息如下：" << endl;
					this->m_EmpArray[i]->showInfo();
				}
			}
			if (flag == false) {
				cout << "查找失败，查无此人" << endl;
			}
		}
		else {
			cout << "输入错误" << endl;
		}
		system("pause");
	}

}

void WorkerManager::Sort_Emp() {
	if (this->m_FileIsEmpty) {
		cout << "文件不存在或记录为空！" << endl;
		system("pause");
	}
	else
	{
		cout << "请选择排序方式：" << endl;
		cout << "1.按职工号进行升序排" << endl;
		cout << "2.按职工号进行降序排" << endl;
		int select = 0;
		cin >> select;
		for (int i = 0; i < this->m_EmpNum; i++)
		{
			int minOrMax = i;//声明最小值或者最大值的下标
			for (int j = i + 1; j < this->m_EmpNum; j++)
			{
				if (select == 1)//升序
				{
					if (this->m_EmpArray[minOrMax]->m_Id > this->m_EmpArray[j]->m_Id)
					{
						minOrMax = j;
					}				
				}
				else {//降序
					if (this->m_EmpArray[minOrMax]->m_Id < this->m_EmpArray[j]->m_Id)
					{
						minOrMax = j;
					}

				}

				
			}
			//判断最开始认定的最小值或最大值是不是计算的最小值或最大值，如果不是，交换数据2
			if (i != minOrMax) {
				Worker* temp = this->m_EmpArray[i];
				this->m_EmpArray[i] = this->m_EmpArray[minOrMax];
				this->m_EmpArray[minOrMax] = temp;
		}			
	}
		cout << "排序成功！排序后的结果：" << endl;
		this->save();//排序后的结果保存到文件中
		this->show_Emp();//展示所有的职工
	}
}

void WorkerManager::Clean_File() {
	cout << "确认清空？" << endl;
	cout << "1.确定" << endl;
	cout << "2.返回" << endl;
	int select = 0;

	cin >> select;
	if (select == 1) {
		//清空文件
		ofstream ofs(FILENAME, ios::trunc);
		ofs.close();

		if (this->m_EmpArray != NULL)
		{
			//删除堆区每个职工对象
			for (int i = 0; i < this->m_EmpNum; i++) {
				delete this->m_EmpArray[i];
				this->m_EmpArray[i] = NULL;
			}
			//删除堆区数组指针
			delete[] this->m_EmpArray;
			this->m_EmpArray = NULL;
			this->m_EmpNum = 0;
			this->m_FileIsEmpty = true;
		}
		cout << "清空成功" << endl;
		system("pause");
	}
}

WorkerManager::~WorkerManager()
{
	if (this->m_EmpArray != NULL)
	{
		delete[] this->m_EmpArray;
		this->m_EmpArray = NULL;
	}
}

